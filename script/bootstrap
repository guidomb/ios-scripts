#!/bin/bash

set -e

if [ -f script/script_hooks/bootstrap ] && [ -z $DISABLE_BOOTSTRAP_HOOKS ]
then
  source script/script_hooks/bootstrap
fi

print_gem_install_cmd ()
{
  regexp="gem ['\"]([a-zA-Z0-9_-]+)['\"](,.*)?"
  gems=""
  while read -r line
  do
    if [[ $line =~ $regexp ]]
    then
      gems="$gems ${BASH_REMATCH[1]}"
    fi
  done < Gemfile

  echo ""
  echo "  $> 'sudo gem install$gems'"
  echo ""
}

bundle_install ()
{
  echo ""
  echo " → Installing gems"
  echo ""
  if type bundle > /dev/null
  then
    bundle install
  else
    # TODO ask user if he/she wants the script to try to install
    # rbenv, ruby and bundler.
    printf "\033[1;33m⚠ WARNING: Ruby gems in Gemfile could not be installed because 'bundler' is not available.\n" \
           "You should install rbenv or rvm and bundler" \
           "or try to install the gems globally by running the following command:"
    print_gem_install_cmd
    printf "\033[0m"
    exit 1
  fi
}

install_git_hooks ()
{
  if [ ! -z "$INSTALL_GITHOOKS" ]
  then
    echo ""
    echo " → Installing git hooks"
    echo ""
    for hook in script/git_hooks/*
    do
      cp $hook .git/hooks
      echo "    ✔ $hook successfully installed"
    done
    echo ""
  fi
}

bootstrap_carthage ()
{
  echo ""
  echo " → Bootstrapping Carthage"
  echo ""
  call_carthage "bootstrap"
}

bootstrap_cocoapods ()
{
  echo ""
  echo " → Bootstrapping Cocoapods"
  echo ""
  if type bundle > /dev/null && bundle show pod > /dev/null
  then
    bundle exec pod install
  else
    pod install
  fi
}

echo_submodule_name ()
{
  echo "  ✔ $name successfully initialized"
}

init_submodules ()
{
  echo ""
  echo " → Initializing submodules ..."
  echo ""
  git submodule update --quiet --init --recursive > /dev/null
  git submodule foreach --quiet echo_submodule_name
}

before_install_hooks ()
{
  if [ -f script/script_hooks/bootstrap ] && [ -z $DISABLE_BOOTSTRAP_HOOKS ] && type bootstrap_before_install_hooks > /dev/null
  then
    echo ""
    echo " → Running hooks before dependencies install"
    echo ""
    bootstrap_before_install_hooks
  fi
}

after_install_hooks ()
{
  if [ -f script/script_hooks/bootstrap ] && [ -z $DISABLE_BOOTSTRAP_HOOKS ] && type bootstrap_after_install_hooks > /dev/null
  then
    echo ""
    echo " → Running hooks after dependencies install"
    echo ""
    bootstrap_after_install_hooks
  fi
}

install_carthage ()
{
  source script/common/carthage

  if type carthage > /dev/null
  then
    echo ""
    echo " → Checking installed version of carthage"
    echo ""
    check_carthage_version
  else
    force_install_carthage
  fi

  if [ -z "$DISABLE_CARTHAGE_CACHE_CONFIG" ] && type bundle > /dev/null && bundle show carthage_cache > /dev/null && [ ! -f .carthage_cache.yml ]
  then
    bundle exec carthage_cache config
  fi
}

install_swiftlint ()
{
  source script/common/swiftlint

  if type swiftlint > /dev/null
  then
    echo ""
    echo " → Checking installed version of swiftlint"
    echo ""
    check_swiftlint_version
  else
    force_install_swiftlint
  fi
}

install_swiftformat ()
{
  source script/common/swiftformat

  if type swiftformat > /dev/null
  then
    echo ""
    echo " ✔ SwiftFormat already installed!"
    echo ""
  else
    force_install_swiftformat
  fi
}

install_tailor ()
{
  source script/common/tailor

  if type tailor > /dev/null
  then
    echo ""
    echo " → Checking installed version of tailor"
    echo ""
    check_tailor_version
  else
    force_install_tailor
  fi
}

main ()
{
  source script/.env

  echo ""
  echo " Bootstrapping $PROJECT_NAME"
  echo ""

  if [ -z "$DISABLE_XCODE_CHECK" ]
  then
    script/common/check_xcode_version $REQUIRED_XCODE_VERSION
  fi

  install_git_hooks

  before_install_hooks

  if [ -f Gemfile ]
  then
    bundle_install
  fi

  if [ -f Cartfile.resolved ]
  then
    install_carthage
    bootstrap_carthage
  fi

  if [ -f .swiftlint.yml ]
  then
    install_swiftlint
  fi
  
  if [ -n $USE_SWIFTFORMAT ]
  then
    install_swiftformat
  fi

  if [ -f .tailor.yml ]
  then
    install_tailor
  fi

  if [ -f Podfile ]
  then
    bootstrap_cocoapods
  fi

  if [ -f .gitmodules ]
  then
    init_submodules
  fi

  after_install_hooks

  open_file_name=""
  if [ -z "$XCODE_WORKSPACE" ]
  then
    open_file_name=$XCODE_PROJECT
  else
    open_file_name=$XCODE_WORKSPACE
  fi

  echo ""
  echo " $PROJECT_NAME successfully bootstrapped"
  echo ""
  echo " Usefull scripts:"
  echo ""
  echo "  * 'script/test' to run tests."
  echo "  * 'script/build' to build the project."
  echo "  * 'script/update' to update project's dependencies."
  echo ""
  echo " You can start hacking by executing:"
  echo ""
  echo "    open $open_file_name"
  echo ""
}

export -f init_submodules
export -f echo_submodule_name

main
